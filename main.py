import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import wikipediaapi
import requests
from urllib.parse import urlparse
from bs4 import BeautifulSoup
import time
import socket
import dns.resolver
import csv
import pandas as pd
import random
import os
import webbrowser
import json

try:
    import whois
except ImportError:
    whois = None

class WikiDomainChecker:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("WikiLink Domain Checker")
        self.root.geometry("600x500")
        self.root.resizable(False, False)
        
        self.results = []
        self.all_checked_domains = []  # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        self.is_running = False
        self.stop_requested = False
        self.setup_ui()
        
    def setup_ui(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(self.root, text="WikiLink Domain Checker", 
                              font=("Arial", 16, "bold"))
        title_label.pack(pady=10)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        tk.Label(self.root, text="–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):").pack(pady=5)
        self.keywords_entry = tk.Entry(self.root, width=60)
        self.keywords_entry.pack(pady=5)
        
        # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
        lang_frame = tk.Frame(self.root)
        lang_frame.pack(pady=5)
        tk.Label(lang_frame, text="–Ø–∑—ã–∫ Wikipedia:").pack(side='left', padx=5)
        self.lang_var = tk.StringVar(value="ru")
        lang_options = [("–†—É—Å—Å–∫–∏–π", "ru"), ("English", "en"), ("Deutsch", "de"), ("Fran√ßais", "fr")]
        for text, value in lang_options:
            tk.Radiobutton(lang_frame, text=text, variable=self.lang_var, 
                          value=value).pack(side='left', padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = tk.Frame(self.root)
        control_frame.pack(pady=10)
        
        self.start_button = tk.Button(control_frame, text="–ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", 
                                     command=self.start_check, bg="#4CAF50", 
                                     fg="white", font=("Arial", 10, "bold"))
        self.start_button.pack(side='left', padx=5)
        
        self.stop_button = tk.Button(control_frame, text="–°—Ç–æ–ø", 
                                    command=self.stop_check, bg="#f44336", 
                                    fg="white", font=("Arial", 10, "bold"), state='disabled')
        self.stop_button.pack(side='left', padx=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress = ttk.Progressbar(self.root, mode='indeterminate')
        self.progress.pack(pady=5, padx=20, fill='x')
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = tk.Label(self.root, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", fg="green")
        self.status_label.pack(pady=5)
        
        # –õ–æ–≥
        tk.Label(self.root, text="–õ–æ–≥:").pack(pady=(10,0))
        self.log_text = scrolledtext.ScrolledText(self.root, height=12, width=70)
        self.log_text.pack(pady=5, padx=20, fill='both', expand=True)
        
        # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        button_frame = tk.Frame(self.root)
        button_frame.pack(pady=10)
        
        self.save_csv_button = tk.Button(button_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV", 
                                        command=lambda: self.save_csv(), state='disabled')
        self.save_csv_button.pack(side='left', padx=5)
        
        self.save_excel_button = tk.Button(button_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å Excel", 
                                          command=lambda: self.save_excel(), state='disabled')
        self.save_excel_button.pack(side='left', padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏
        contact_button = tk.Button(button_frame, text="–°–≤—è–∑—å", 
                                  command=lambda: self.open_contact(), bg="#2196F3", fg="white")
        contact_button.pack(side='left', padx=5)
        
    def log(self, message):
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        self.root.update()
        
    def start_check(self):
        if self.is_running:
            return
            
        keywords_text = self.keywords_entry.get().strip()
        if not keywords_text:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
            return
            
        keywords = [kw.strip() for kw in keywords_text.split(',')]
        language = self.lang_var.get()
        
        self.is_running = True
        self.stop_requested = False
        self.start_button.config(state='disabled')
        self.stop_button.config(state='normal')
        self.save_csv_button.config(state='disabled')
        self.save_excel_button.config(state='disabled')
        self.progress.start()
        self.status_label.config(text="–ü—Ä–æ–≤–µ—Ä–∫–∞...", fg="orange")
        self.log_text.delete(1.0, tk.END)
        self.results = []
        self.all_checked_domains = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        
        thread = threading.Thread(target=self.check_domains, args=(keywords, language))
        thread.start()
        
    def stop_check(self):
        self.stop_requested = True
        self.log("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        
    def check_domains(self, keywords, language):
        try:
            if self.stop_requested:
                return
                
            self.log(f"–ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü Wikipedia ({language})...")
            pages = self.search_wikipedia(keywords, language)
            
            if not pages:
                self.log("–°—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                self.finish_check()
                return
                
            self.log(f"–ù–∞–π–¥–µ–Ω–æ {len(pages)} —Å—Ç—Ä–∞–Ω–∏—Ü")
            
            for keyword, title, url in pages:
                if self.stop_requested:
                    break
                    
                self.log(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title} ({url})")
                external_links = self.fetch_external_links(url)
                
                if not external_links:
                    self.log("–í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    continue
                    
                self.log(f"–ù–∞–π–¥–µ–Ω–æ {len(external_links)} –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–æ–≤...")
                
                for link in external_links:
                    if self.stop_requested:
                        break
                        
                    domain = self.get_domain(link)
                    if not domain or ':' in domain:
                        continue
                        
                    self.log(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω: {domain}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–∞
                    is_available = self.check_domain_availability(domain)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ Archive.org
                    archive_info = self.check_archive_org(domain)
                    archive_text = archive_info if archive_info else "–Ω–µ –Ω–∞–π–¥–µ–Ω"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
                    self.all_checked_domains.append((
                        keyword, 
                        title, 
                        link, 
                        domain, 
                        "–î–æ—Å—Ç—É–ø–µ–Ω" if is_available else "–ó–∞–Ω—è—Ç",
                        archive_text
                    ))
                    
                    if is_available:
                        self.log(f"  ‚úì –î–æ–º–µ–Ω {domain} –¥–æ—Å—Ç—É–ø–µ–Ω")
                        self.log(f"    üìÖ –ê—Ä—Ö–∏–≤: {archive_text}")
                        self.results.append((keyword, title, link, domain, archive_text))
                    else:
                        self.log(f"  ‚úó –î–æ–º–µ–Ω {domain} –∑–∞–Ω—è—Ç")
                        self.log(f"    üìÖ –ê—Ä—Ö–∏–≤: {archive_text}")
                    
                    time.sleep(random.uniform(1.0, 2.0))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è Archive.org
                    
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞: {e}")
            
        self.finish_check()
        
    def finish_check(self):
        self.is_running = False
        self.progress.stop()
        self.start_button.config(state='normal')
        self.stop_button.config(state='disabled')
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ
        if self.all_checked_domains:
            self.save_csv_button.config(state='normal')
            self.save_excel_button.config(state='normal')
        
        if self.results:
            self.log(f"\n–ù–∞–π–¥–µ–Ω–æ {len(self.results)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤")
            self.log(f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –¥–æ–º–µ–Ω–æ–≤: {len(self.all_checked_domains)}")
            self.status_label.config(text="–ì–æ—Ç–æ–≤–æ", fg="green")
        else:
            if self.all_checked_domains:
                self.log(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                self.log(f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –¥–æ–º–µ–Ω–æ–≤: {len(self.all_checked_domains)}")
                self.status_label.config(text="–ì–æ—Ç–æ–≤–æ", fg="green")
            else:
                self.log("\n–î–æ–º–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                self.status_label.config(text="–ì–æ—Ç–æ–≤–æ", fg="green")
            
    def search_wikipedia(self, keywords, language):
        user_agent = "WikiLinkChecker/1.0"
        wiki_wiki = wikipediaapi.Wikipedia(
            language=language,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —è–∑—ã–∫
            extract_format=wikipediaapi.ExtractFormat.WIKI,
            user_agent=user_agent
        )
        
        results = []
        for keyword in keywords:
            if self.stop_requested:
                break
                
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                page = wiki_wiki.page(keyword)
                if page.exists():
                    results.append((keyword, page.title, page.fullurl))
                    continue
                
                # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫
                search_results = wiki_wiki.search(keyword, results=5)
                for search_result in search_results:
                    if self.stop_requested:
                        break
                    page = wiki_wiki.page(search_result)
                    if page.exists():
                        results.append((keyword, page.title, page.fullurl))
                        
            except Exception as e:
                self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ '{keyword}': {e}")
                continue
                
        return results
        
    def fetch_external_links(self, page_url):
        try:
            headers = {"User-Agent": "WikiLinkChecker/1.0"}
            response = requests.get(page_url, headers=headers, timeout=10)
            if response.status_code != 200:
                return set()
                
            soup = BeautifulSoup(response.text, 'html.parser')
            external_links = set()
            
            for a_tag in soup.find_all('a', href=True):
                href = a_tag['href']
                if href.startswith(('http://', 'https://')):
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–º—É Wikipedia
                    if 'wikipedia.org' not in href and 'wikimedia.org' not in href:
                        external_links.add(href)
                        
            return external_links
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫: {e}")
            return set()
            
    def get_domain(self, url):
        try:
            parsed = urlparse(url)
            domain = parsed.netloc
            # –£–±–∏—Ä–∞–µ–º www. –µ—Å–ª–∏ –µ—Å—Ç—å
            if domain.startswith('www.'):
                domain = domain[4:]
            return domain
        except:
            return None
            
    def check_archive_org(self, domain):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–æ–º–µ–Ω–∞ –≤ Archive.org"""
        try:
            # API Wayback Machine –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–Ω–∏–º–∫–æ–≤
            url = f"http://archive.org/wayback/available?url={domain}"
            headers = {"User-Agent": "WikiLinkChecker/1.0"}
            
            response = requests.get(url, headers=headers, timeout=10)
            if response.status_code != 200:
                return None
                
            data = response.json()
            
            if data.get('archived_snapshots') and data['archived_snapshots'].get('closest'):
                snapshot = data['archived_snapshots']['closest']
                if snapshot.get('available'):
                    timestamp = snapshot.get('timestamp', '')
                    if timestamp:
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É (YYYYMMDDHHMMSS -> YYYY-MM-DD)
                        date_str = f"{timestamp[:4]}-{timestamp[4:6]}-{timestamp[6:8]}"
                        return f"–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–Ω–∏–º–æ–∫ {date_str}"
                    return "–Ω–∞–π–¥–µ–Ω—ã —Å–Ω–∏–º–∫–∏"
            
            return None
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Archive.org –¥–ª—è {domain}: {e}")
            return None
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ whois –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if whois:
                try:
                    w = whois.whois(domain)
                    if w.domain_name:
                        return False
                except:
                    pass
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ DNS
            try:
                answers = dns.resolver.resolve(domain, 'A')
                return False  # –ï—Å–ª–∏ –µ—Å—Ç—å A-–∑–∞–ø–∏—Å–∏, –¥–æ–º–µ–Ω –∑–∞–Ω—è—Ç
            except (dns.resolver.NXDOMAIN, dns.resolver.NoAnswer):
                return True  # –î–æ–º–µ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            except:
                return False  # –û—à–∏–±–∫–∞ - —Å—á–∏—Ç–∞–µ–º –¥–æ–º–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º
                
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–µ–Ω–∞ {domain}: {e}")
            return False
    def check_domain_availability(self, domain):
        if not self.results:
            return
            
        filepath = filedialog.asksaveasfilename(
            defaultextension=".csv",
            filetypes=[("CSV files", "*.csv")]
        )
        
        if filepath:
            try:
                with open(filepath, 'w', newline='', encoding='utf-8') as f:
                    writer = csv.writer(f)
                    writer.writerow(["–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", "–°—Ç–∞—Ç—å—è", "–°—Å—ã–ª–∫–∞", "–î–æ–º–µ–Ω", "–ê—Ä—Ö–∏–≤"])
                    writer.writerows(self.results)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")
                
    def save_excel(self):
        if not self.all_checked_domains:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
            
        filepath = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx")]
        )
        
        if filepath:
            try:
                df = pd.DataFrame(self.all_checked_domains, 
                                columns=["–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", "–°—Ç–∞—Ç—å—è", "–°—Å—ã–ª–∫–∞", "–î–æ–º–µ–Ω", "–°—Ç–∞—Ç—É—Å", "–ê—Ä—Ö–∏–≤"])
                df.to_excel(filepath, index=False)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.all_checked_domains)} –∑–∞–ø–∏—Å–µ–π –≤: {filepath}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")
                
    def open_contact(self):
        webbrowser.open("https://t.me/Userspoi")
        
    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    app = WikiDomainChecker()
    app.run()
